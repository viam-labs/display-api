// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: display.proto

package display

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DisplayService_DisplayBytes_FullMethodName = "/viamlabs.component.display.v1.DisplayService/DisplayBytes"
	DisplayService_WriteString_FullMethodName  = "/viamlabs.component.display.v1.DisplayService/WriteString"
	DisplayService_DrawLine_FullMethodName     = "/viamlabs.component.display.v1.DisplayService/DrawLine"
	DisplayService_Reset_FullMethodName        = "/viamlabs.component.display.v1.DisplayService/Reset"
)

// DisplayServiceClient is the client API for DisplayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DisplayServiceClient interface {
	DisplayBytes(ctx context.Context, in *DisplayBytesRequest, opts ...grpc.CallOption) (*DisplayBytesResponse, error)
	WriteString(ctx context.Context, in *WriteStringRequest, opts ...grpc.CallOption) (*WriteStringResponse, error)
	DrawLine(ctx context.Context, in *DrawLineRequest, opts ...grpc.CallOption) (*DrawLineResponse, error)
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error)
}

type displayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDisplayServiceClient(cc grpc.ClientConnInterface) DisplayServiceClient {
	return &displayServiceClient{cc}
}

func (c *displayServiceClient) DisplayBytes(ctx context.Context, in *DisplayBytesRequest, opts ...grpc.CallOption) (*DisplayBytesResponse, error) {
	out := new(DisplayBytesResponse)
	err := c.cc.Invoke(ctx, DisplayService_DisplayBytes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayServiceClient) WriteString(ctx context.Context, in *WriteStringRequest, opts ...grpc.CallOption) (*WriteStringResponse, error) {
	out := new(WriteStringResponse)
	err := c.cc.Invoke(ctx, DisplayService_WriteString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayServiceClient) DrawLine(ctx context.Context, in *DrawLineRequest, opts ...grpc.CallOption) (*DrawLineResponse, error) {
	out := new(DrawLineResponse)
	err := c.cc.Invoke(ctx, DisplayService_DrawLine_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayServiceClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error) {
	out := new(ResetResponse)
	err := c.cc.Invoke(ctx, DisplayService_Reset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DisplayServiceServer is the server API for DisplayService service.
// All implementations must embed UnimplementedDisplayServiceServer
// for forward compatibility
type DisplayServiceServer interface {
	DisplayBytes(context.Context, *DisplayBytesRequest) (*DisplayBytesResponse, error)
	WriteString(context.Context, *WriteStringRequest) (*WriteStringResponse, error)
	DrawLine(context.Context, *DrawLineRequest) (*DrawLineResponse, error)
	Reset(context.Context, *ResetRequest) (*ResetResponse, error)
	mustEmbedUnimplementedDisplayServiceServer()
}

// UnimplementedDisplayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDisplayServiceServer struct {
}

func (UnimplementedDisplayServiceServer) DisplayBytes(context.Context, *DisplayBytesRequest) (*DisplayBytesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisplayBytes not implemented")
}
func (UnimplementedDisplayServiceServer) WriteString(context.Context, *WriteStringRequest) (*WriteStringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteString not implemented")
}
func (UnimplementedDisplayServiceServer) DrawLine(context.Context, *DrawLineRequest) (*DrawLineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DrawLine not implemented")
}
func (UnimplementedDisplayServiceServer) Reset(context.Context, *ResetRequest) (*ResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedDisplayServiceServer) mustEmbedUnimplementedDisplayServiceServer() {}

// UnsafeDisplayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DisplayServiceServer will
// result in compilation errors.
type UnsafeDisplayServiceServer interface {
	mustEmbedUnimplementedDisplayServiceServer()
}

func RegisterDisplayServiceServer(s grpc.ServiceRegistrar, srv DisplayServiceServer) {
	s.RegisterService(&DisplayService_ServiceDesc, srv)
}

func _DisplayService_DisplayBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisplayBytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisplayServiceServer).DisplayBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisplayService_DisplayBytes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisplayServiceServer).DisplayBytes(ctx, req.(*DisplayBytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisplayService_WriteString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisplayServiceServer).WriteString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisplayService_WriteString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisplayServiceServer).WriteString(ctx, req.(*WriteStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisplayService_DrawLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrawLineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisplayServiceServer).DrawLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisplayService_DrawLine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisplayServiceServer).DrawLine(ctx, req.(*DrawLineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisplayService_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisplayServiceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisplayService_Reset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisplayServiceServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DisplayService_ServiceDesc is the grpc.ServiceDesc for DisplayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DisplayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viamlabs.component.display.v1.DisplayService",
	HandlerType: (*DisplayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DisplayBytes",
			Handler:    _DisplayService_DisplayBytes_Handler,
		},
		{
			MethodName: "WriteString",
			Handler:    _DisplayService_WriteString_Handler,
		},
		{
			MethodName: "DrawLine",
			Handler:    _DisplayService_DrawLine_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _DisplayService_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "display.proto",
}
